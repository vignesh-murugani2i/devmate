name: Build Linux App

on:
  push:
    # branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          # Install webkit2gtk (try 4.1 first, fallback to 4.0)
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev
          # Install other dependencies
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Check build environment
        run: |
          echo "Ubuntu version:"
          lsb_release -a
          echo "GLIBC version:"
          ldd --version
          echo "Rust version:"
          rustc --version

      - name: Configure build environment for compatibility
        run: |
          # Ensure we're building with maximum compatibility for Ubuntu 22.04
          echo "RUSTFLAGS=-C target-cpu=x86-64 -C link-arg=-Wl,--compress-debug-sections=zlib" >> $GITHUB_ENV

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Fix package-lock.json
        run: |
          rm -f package-lock.json
          npm install --package-lock-only
          
      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app (Linux)
        run: |
          npm run tauri build -- --target x86_64-unknown-linux-gnu --bundles deb,appimage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify binary compatibility
        run: |
          echo "Checking binary GLIBC dependencies:"
          # Find the built binary
          BINARY_PATH=$(find src-tauri/target/x86_64-unknown-linux-gnu/release -name "devmate" -type f | head -1)
          if [ -f "$BINARY_PATH" ]; then
            echo "Binary found at: $BINARY_PATH"
            echo "GLIBC dependencies:"
            objdump -T "$BINARY_PATH" | grep GLIBC | sort -u
            echo "All dependencies:"
            ldd "$BINARY_PATH" || true
          else
            echo "Binary not found, checking bundle directory..."
            find src-tauri/target/x86_64-unknown-linux-gnu/release -name "*devmate*" -type f
          fi

      - name: Upload Linux DEB
        uses: actions/upload-artifact@v4
        with:
          name: DevMate-Linux-x64.deb
          path: src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb
          if-no-files-found: error

      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: DevMate-Linux-x64.AppImage
          path: src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
          if-no-files-found: error

      - name: Create Release (on tag)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
          generate_release_notes: true
          draft: false
          prerelease: false